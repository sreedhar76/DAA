#include <stdio.h>
#include <limits.h>

// Function to find the optimal cost of matrix multiplication
int matrixChainOrder(int p[], int n) {
    int dp[n][n]; // DP table to store optimal costs

    // Set diagonal elements to 0 (cost of multiplying one matrix is 0)
    for (int i = 1; i < n; i++) {
        dp[i][i] = 0;
    }

    // Fill the table using the optimal substructure property
    for (int length = 2; length < n; length++) {
        for (int i = 1; i < n - length + 1; i++) {
            int j = i + length - 1;
            dp[i][j] = INT_MAX;
            for (int k = i; k < j; k++) {
                int cost = dp[i][k] + dp[k+1][j] + p[i-1] * p[k] * p[j];
                if (cost < dp[i][j]) {
                    dp[i][j] = cost;
                }
            }
        }
    }

    // Return the optimal cost of multiplying matrices from 1 to n-1
    return dp[1][n-1];
}

int main() {
    int p[] = {1, 2, 3, 4}; // Dimensions of matrices (e.g., A1: 1x2, A2: 2x3, A3: 3x4)
    int n = sizeof(p) / sizeof(p[0]);

    printf("Minimum cost of matrix multiplication: %d\n", matrixChainOrder(p, n));
    
    return 0;
}
