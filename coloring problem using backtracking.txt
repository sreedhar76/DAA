#include <stdio.h>
#define V 4  // Number of vertices in the graph

// Function to print the color assignment
void printSolution(int color[]) {
    printf("Assigned colors are:\n");
    for (int i = 0; i < V; i++)
        printf("Vertex %d ---> Color %d\n", i, color[i]);
}

// Function to check if it's safe to color vertex v with color c
int isSafe(int v, int graph[V][V], int color[], int c) {
    for (int i = 0; i < V; i++)
        if (graph[v][i] && c == color[i])  // Check if adjacent vertices have the same color
            return 0;
    return 1;
}

// Recursive function to solve the graph coloring problem
int graphColoringUtil(int graph[V][V], int m, int color[], int v) {
    // If all vertices are assigned a color, return true
    if (v == V)
        return 1;

    // Try different colors for vertex v
    for (int c = 1; c <= m; c++) {
        // Check if color c can be assigned to vertex v
        if (isSafe(v, graph, color, c)) {
            color[v] = c;  // Assign color c to vertex v

            // Recur to assign colors to the rest of the vertices
            if (graphColoringUtil(graph, m, color, v + 1))
                return 1;

            // If assigning color c doesn't lead to a solution, backtrack
            color[v] = 0;
        }
    }

    // If no color can be assigned to this vertex, return false
    return 0;
}

// Function to solve the graph coloring problem
int graphColoring(int graph[V][V], int m) {
    int color[V] = {0};  // Initialize all vertices with no color (0)

    // Call the recursive utility function to solve the problem
    if (graphColoringUtil(graph, m, color, 0)) {
        printSolution(color);
        return 1;
    } else {
        printf("Solution does not exist\n");
        return 0;
    }
}

int main() {
    // Adjacency matrix representation of a graph
    int graph[V][V] = {
        {0, 1, 1, 1},
        {1, 0, 1, 0},
        {1, 1, 0, 1},
        {1, 0, 1, 0}
    };

    int m = 3;  // Number of colors

    graphColoring(graph, m);
    return 0;
}
