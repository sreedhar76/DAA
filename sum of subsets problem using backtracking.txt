#include <stdio.h>

#define MAX 100  // Maximum number of elements in the set

// Function to print the current subset
void printSubset(int subset[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", subset[i]);
    }
    printf("\n");
}

// Backtracking function to find subsets with the given sum
void sumOfSubsets(int set[], int subset[], int n, int subsetSize, int total, int target, int index) {
    // If the total of the current subset equals the target sum, print the subset
    if (total == target) {
        printSubset(subset, subsetSize);
        return;
    }

    // Try to add more elements to the subset
    for (int i = index; i < n; i++) {
        // Only include elements if the total doesn't exceed the target
        if (total + set[i] <= target) {
            subset[subsetSize] = set[i];  // Add element to the subset
            sumOfSubsets(set, subset, n, subsetSize + 1, total + set[i], target, i + 1);  // Recur for remaining elements
        }
    }
}

int main() {
    int n, target;
    int set[MAX], subset[MAX];

    // Input the number of elements in the set
    printf("Enter the number of elements in the set: ");
    scanf("%d", &n);

    // Input the elements of the set
    printf("Enter the elements of the set: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &set[i]);
    }

    // Input the target sum
    printf("Enter the target sum: ");
    scanf("%d", &target);

    printf("Subsets with sum %d are:\n", target);

    // Call the backtracking function to find subsets with the target sum
    sumOfSubsets(set, subset, n, 0, 0, target, 0);

    return 0;
}
