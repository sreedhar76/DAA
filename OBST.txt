def optimal_bst(keys, freq):
    n = len(keys)
    cost = [[0] * n for _ in range(n)]
    sum_freq = [[0] * n for _ in range(n)]

    # Initialize frequency sum
    for i in range(n):
        sum_freq[i][i] = freq[i]
        for j in range(i + 1, n):
            sum_freq[i][j] = sum_freq[i][j - 1] + freq[j]

    # Fill the cost table
    for length in range(1, n + 1):  # length of the chain
        for i in range(n - length + 1):
            j = i + length - 1
            cost[i][j] = float('inf')
            for r in range(i, j + 1):
                left_cost = cost[i][r - 1] if r > i else 0
                right_cost = cost[r + 1][j] if r < j else 0
                total_cost = left_cost + right_cost + sum_freq[i][j]
                if total_cost < cost[i][j]:
                    cost[i][j] = total_cost

    return cost[0][n - 1]

# Example usage
keys = [10, 12, 20]
freq = [34, 8, 50]
min_cost = optimal_bst(keys, freq)
print("Minimum cost of Optimal BST:", min_cost)
